{"version":3,"sources":["emoji.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAmB,KAAA,EAAO,MAAA,EAAQ,YAAA,EAAa,MAAO,eAAA,CAAgB;AAC/E,OAAO,EAAE,YAAA,EAAa,MAAO,iBAAA,CAAkB;AAC/C,OAAO,CAAA,MAAO,YAAA,CAAa;AAG3B;IAQE,wBAAoB,YAA0B;QAA9C,iBAgBC;QAhBmB,iBAAY,GAAZ,YAAY,CAAc;QAN7C,aAAQ,GAAG,IAAI,YAAY,EAAU,CAAC;QAGvC,eAAU,GAAG,EAAE,CAAC;QAId,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,UAAC,MAAM;YAC3D,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACpB,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;gBACtB,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;gBAC5C,CAAC;YACH,CAAC;YAAA,CAAC;YACF,IAAI,KAAK,GAAG,EAAE,CAAC;YACf,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAS,IAAI,EAAE,GAAG;gBAC/B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBAC5C,qGAAqG;gBACrG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;YACH,KAAI,CAAC,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,UAAS,IAAI,IAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC;IAED,4CAAmB,GAAnB,UAAoB,QAAQ;QAC1B,MAAM,CAAC,gDAAgD,GAAG,QAAQ,GAAG,MAAM,CAAC;IAC9E,CAAC;IAED,+BAAM,GAAN,UAAO,SAAiB;QACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChC,CAAC;IAoCH,qBAAC;AAAD,CApEA,AAoEC;;AAnCD;;;;;;;;;;KAUK;AACE,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,yBAAyB;gBACnC,QAAQ,EAAE,kYAUT;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,YAAY,GAAG;CACrB,EAF6F,CAE7F,CAAC;AACK,6BAAc,GAA2C;IAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC9B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CAC9B,CAAC","file":"emoji.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { EmojiService } from './emoji.service';\nimport _ from 'underscore';\n\n\nexport class EmojiComponent {\n    selected;\n   onSelect = new EventEmitter<string>();\n\n  config;\n  categories = [];\n  emojis;\n\n  constructor(private emojiService: EmojiService) {\n    this.config = emojiService.getEmojiConfig().subscribe((config) => {\n      console.log(config);\n      for (var id in config) {\n        if (this.categories.indexOf(config[id].category) === -1) {\n          this.categories.push(config[id].category);\n        }\n      };\n      let items = [];\n      _(config).each(function(elem, key){\n        elem.key = elem.shortname.replace(/:/g, '');\n        //elem.url = 'https://cdn.jsdelivr.net/emojione/assets/3.0/png/64/' + elem.code_points.base + '.png';\n        items.push(elem);\n      });\n      this.emojis = _.groupBy(items, function(item){ return item.category; });\n    });\n  }\n\n  getCategoryIconPath(category){\n    return \"./node_modules/emojione/extras/category_icons/\" + category + \".svg\";\n  }\n\n  select(shortname: string) {\n    this.onSelect.emit(shortname);\n  }\n/*  ngOnInit(private emojiService: EmojiService) {\n    this.config = emojiService.getConfig().subscribe((config) => {\n      console.log(config);\n      for (var id in config) {\n        debugger\n        if (this.categories.indexOf(this.config[id].category) === -1) {\n          this.categories.push(this.config[id].category);\n        }\n      };\n    });\n  }*/\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'app-ngx-bb-emoji-picker',\n  template: `\n    <md-tab-group>\n        <md-tab *ngFor='let category of categories'>\n            <ng-template md-tab-label>\n                {{category}}\n            </ng-template>\n            <span *ngFor=\"let item of emojis[category]; let i=index\" (click)=\"select(item.shortname)\" [ngClass]=\"'e1a-sm e1a-' + item.key\">\n            </span>\n        </md-tab>\n    </md-tab-group>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EmojiService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'onSelect': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}